
from .decorators import *
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, \
    InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.keyboards import inline_pagination_soundlist_keyboard_build, SoundsCallbackFactory, \
    inline_collections_keyboard_build, inline_pagination_topics_keyboard_build, FavourSoundsCallbackFactory
from db_logic import mongo_db_sounds, get_list_of_topics, get_audiolist_of_topic, \
    brake_list_for_8_items_list, get_filename_of_sound, get_collection_by_number, \
    get_topic_by_number, get_audio_by_id, get_col_name_by_topic, get_number_of_collection, add_favorite_audio_to_list, \
    check_is_there_audio_in_favorlist

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router: Router = Router()




@router.message(F.text == 'üéµ –í—Å–µ –∞—É–¥–∏–æ-—Å—Ç–∏–∫–µ—Ä—ã')
@check_subscrib_to_channel_1param
async def show_collections_list(message: Message):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
    :param message: Message
    :return:
    """
    await message.delete()
    coll_names = await mongo_db_sounds.list_collection_names()
    markup = await inline_collections_keyboard_build(coll_names, width=1)
    await message.answer(text='üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=markup)


# –ó–∞–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ callback.data, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–±—Ä–∏–æ–∫–æ–π, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏,
# –Ω–∞ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã topic, id_sound. –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç
# collection –Ω–µ–ø—É—Å—Ç–æ–π.
@router.callback_query(SoundsCallbackFactory.filter(F.topic == '0'),
                       SoundsCallbackFactory.filter(F.id_sound == '0'))
@check_subscrib_to_channel_2param
async def show_topics_list(callback: CallbackQuery,
                           callback_data: SoundsCallbackFactory):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é-—Å–ø–∏—Å–æ–∫ —Å —Ç–µ–º–∞–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    :param callback: CallbackQuery
    :param callback_data: SoundsCallbackFactory
    :return:
    """
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collect_name = await get_collection_by_number(callback_data.collection)
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–æ–∫ —Ç–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –º–∞–∫—Å–∏–º—É–º –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    pages_of_topiclist = await brake_list_for_8_items_list(await get_list_of_topics(collect_name))

    await callback.message.edit_text(text=f'{collect_name}')
    await callback.message.edit_reply_markup(
        reply_markup=await inline_pagination_topics_keyboard_build(
            topic_list=pages_of_topiclist,
            num_collect=callback_data.collection,
            width=1,
            # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ pages_of_audiolist
            index=0)
)


@router.callback_query(SoundsCallbackFactory.filter(F.topic == 'forward_topic_list'))
@check_subscrib_to_channel_2param
async def get_next_page_topic_list(callback: CallbackQuery,
                                   callback_data: SoundsCallbackFactory):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collect_name = await get_collection_by_number(callback_data.collection)
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–æ–∫ —Ç–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –º–∞–∫—Å–∏–º—É–º –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    pages_of_topiclist = await brake_list_for_8_items_list(await get_list_of_topics(collect_name))

    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥—Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3/10"
    str_pages = callback.message.reply_markup.inline_keyboard[-2][-2].text
    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    previous_page = int(str_pages.split('/')[0])

    if len(pages_of_topiclist) > previous_page:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_topics_keyboard_build(
                topic_list=pages_of_topiclist,
                num_collect=callback_data.collection,
                width=1,
                # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ pages_of_audiolist
                index=previous_page)
        )

    elif len(pages_of_topiclist) == 1:
        await callback.answer()

    else:
        # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–≤–Ω–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ
        # —Ç.–µ. –∫ 0 –∏–Ω–¥–µ–∫—Å—É —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–µ 1)
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_topics_keyboard_build(
                topic_list=pages_of_topiclist,
                num_collect=callback_data.collection,
                width=1,
                index=0)
        )


@router.callback_query(SoundsCallbackFactory.filter(F.topic == 'back_topic_list'))
@check_subscrib_to_channel_2param
async def get_previous_page_topic_list(callback: CallbackQuery,
                                   callback_data: SoundsCallbackFactory):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collect_name = await get_collection_by_number(callback_data.collection)
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–æ–∫ —Ç–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –º–∞–∫—Å–∏–º—É–º –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    pages_of_topiclist = await brake_list_for_8_items_list(await get_list_of_topics(collect_name))

    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥—Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3/10"
    str_pages = callback.message.reply_markup.inline_keyboard[-2][-2].text
    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    previous_page = int(str_pages.split('/')[0])

    if previous_page > 1:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_topics_keyboard_build(
                topic_list=pages_of_topiclist,
                num_collect=callback_data.collection,
                width=1,
                # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ pages_of_audiolist
                index=previous_page - 2)
        )

    elif len(pages_of_topiclist) == 1:
        await callback.answer()

    else:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_topics_keyboard_build(
                topic_list=pages_of_topiclist,
                num_collect=callback_data.collection,
                width=1,
                index=len(pages_of_topiclist) - 1)
        )



# –ó–∞–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, —Ç–∞–∫–∂–µ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞-—Ñ–∞–±—Ä–∏–∫–∏ id_sound. –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è,
# —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã collection, topic –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
@router.callback_query(SoundsCallbackFactory.filter(F.id_sound == '0'))
@check_subscrib_to_channel_2param
async def show_sounds_list(callback: CallbackQuery,
                           callback_data: SoundsCallbackFactory):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é-—Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    :param callback: CallbackQuery
    :param callback_data: SoundsCallbackFactory
    :return:
    """
    collect_name = await get_collection_by_number(callback_data.collection)
    topic = await get_topic_by_number(collect_name, callback_data.topic)
    pages_of_audiolist = await brake_list_for_8_items_list(await get_audiolist_of_topic(topic))

    await callback.message.edit_text(text=f'{topic}')
    await callback.message.edit_reply_markup(
        reply_markup=await inline_pagination_soundlist_keyboard_build(
            num_collect=callback_data.collection,
            num_topic=callback_data.topic,
            pages_of_audiolist=pages_of_audiolist,
            # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ pages_of_audiolist
            index=0)
    )


@router.callback_query(SoundsCallbackFactory.filter(F.id_sound == 'forward'))
@check_subscrib_to_channel_2param
@check_date_pagination_btn_2param
async def get_next_page_sound_list(callback: CallbackQuery,
                                   callback_data: SoundsCallbackFactory):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü—É) —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    :param callback: CallbackQuery
    :param callback_data: SoundsCallbackFactory
    :return:
    """
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    topic = callback.message.text
    # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—É–¥–∏–æ –æ–¥–Ω–æ–π —Ç–µ–º—ã –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    pages_of_audiolist = await brake_list_for_8_items_list(await get_audiolist_of_topic(topic))
    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥—Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3/10"
    str_pages = callback.message.reply_markup.inline_keyboard[-2][-2].text
    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    previous_page = int(str_pages.split('/')[0])
    # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
    # —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if len(pages_of_audiolist) > previous_page:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_soundlist_keyboard_build(
                num_collect=callback_data.collection,
                num_topic=callback_data.topic,
                pages_of_audiolist=pages_of_audiolist,
                # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã = –∏–Ω–¥–µ–∫—Å + 1
                # –∏–Ω–¥–µ–∫—Å–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                index=previous_page)
        )

    elif len(pages_of_audiolist) == 1:
        await callback.answer()

    else:
        # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–≤–Ω–æ –Ω–æ–º–µ—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ
        # —Ç.–µ. –∫ 0 –∏–Ω–¥–µ–∫—Å—É —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–µ 1)
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_soundlist_keyboard_build(
                num_collect=callback_data.collection,
                num_topic=callback_data.topic,
                pages_of_audiolist=pages_of_audiolist,
                index=0)
        )

@router.callback_query(SoundsCallbackFactory.filter(F.id_sound == 'back'))
@check_subscrib_to_channel_2param
@check_date_pagination_btn_2param
async def get_previous_page_sound_list(callback: CallbackQuery,
                                       callback_data: SoundsCallbackFactory):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü—É) —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    :param callback: CallbackQuery
    :param callback_data: SoundsCallbackFactory
    :return:
    """
    topic = callback.message.text
    pages_of_audiolist = await brake_list_for_8_items_list(await get_audiolist_of_topic(topic))
    str_pages = callback.message.reply_markup.inline_keyboard[-2][-2].text
    previous_page = int(str_pages.split('/')[0])
    if previous_page > 1:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_soundlist_keyboard_build(
                num_collect=callback_data.collection,
                num_topic=callback_data.topic,
                pages_of_audiolist=pages_of_audiolist,
                index=previous_page - 2)
        )

    elif len(pages_of_audiolist) == 1:
        await callback.answer()

    else:
        await callback.message.edit_reply_markup(
            reply_markup=await inline_pagination_soundlist_keyboard_build(
                num_collect=callback_data.collection,
                num_topic=callback_data.topic,
                pages_of_audiolist=pages_of_audiolist,
                index=len(pages_of_audiolist) - 1)
        )


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ø–¥–µ–π—Ç –∫–Ω–æ–ø–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–π (—Ä–∞–∑–¥–µ–ª–æ–≤)
@router.callback_query(F.data == 'back_to_collection_menu')
@check_subscrib_to_channel_1param
async def back_to_collection_menu(callback: CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω–ª–∞–π–π-–º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
    –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —Ç–µ–º
    :param callback: CallbackQuery
    :return:
    """
    markup = await inline_collections_keyboard_build(await mongo_db_sounds.list_collection_names(), width=1)
    await callback.message.edit_text(text='üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª')
    await callback.message.edit_reply_markup(reply_markup=markup)


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ø–¥–µ–π—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
@router.callback_query(F.data == 'back_to_topic_menu')
@check_subscrib_to_channel_1param
async def back_to_topic_menu(callback: CallbackQuery):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω–ª–∞–π–π-–º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —Å –∞—É–¥–∏–æ
    :param callback: CallbackQuery
    :return:
    """
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    topic = callback.message.text
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ–º—ã
    collection_name = await get_col_name_by_topic(topic)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü) —Å —Ç–µ–º–∞–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    pages_of_topiclist = await brake_list_for_8_items_list(await get_list_of_topics(collection_name))
    num_collect = await get_number_of_collection(collection_name)
    await callback.message.edit_text(text=f'{collection_name}')
    await callback.message.edit_reply_markup(
        reply_markup=await inline_pagination_topics_keyboard_build(
            topic_list=pages_of_topiclist,
            num_collect=num_collect,
            width=1,
            # –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–∫–µ pages_of_audiolist
            index=0)
    )


# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, –≤ —Ñ–∏–ª—å—Ç—Ä –ø–æ–ø–∞–µ—Ç collback.data —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–æ–ª–µ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
@router.callback_query(SoundsCallbackFactory.filter())
@check_subscrib_to_channel_2param
async def get_audio_file(callback: CallbackQuery, callback_data: SoundsCallbackFactory):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ-—Ñ–∞–π–ª
    :param callback: CallbackQuery
    :param callback_data: SoundsCallbackFactory
    :return:
    """
    # –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –±–¥ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collection = await get_collection_by_number(callback_data.collection)
    # –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–º—ã –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–º—ã
    topic = await get_topic_by_number(collection, callback_data.topic)
    # –ø–æ –Ω–æ–º–µ—Ä–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ç–µ–º—ã –∏ id –∞—É–¥–∏–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    name_sound = await get_audio_by_id(callback_data.collection,
                                         callback_data.topic,
                                         callback_data.id_sound)
    # –ø–æ —Ç–µ–º–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∞—É–¥–∏–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_name = await get_filename_of_sound(topic, name_sound)

    button = InlineKeyboardButton(
        text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        callback_data=FavourSoundsCallbackFactory(
            collection=callback_data.collection,
            topic=callback_data.topic,
            id_sound=callback_data.id_sound
                                  ).pack()
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])

    await callback.message.answer_audio(
        audio=FSInputFile(f'audio/{topic}/{file_name}'),
        title=f'{name_sound}',
        caption='https://t.me/exprrrrrrr_bot',
        performer=f'{topic}',
        thumbnail=FSInputFile(f'audio/{topic}/{topic}.jpeg'),
        reply_markup=keyboard)
    await callback.answer()


@router.callback_query(FavourSoundsCallbackFactory.filter())
async def set_audio_to_favorites_list(callback: CallbackQuery,
                                       callback_data: FavourSoundsCallbackFactory):
    result = await check_is_there_audio_in_favorlist(str(callback.message.chat.id),
                                      callback_data.pack())
    if result:
        await callback.answer('üòâ –ê—É–¥–∏–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!', show_alert=True)
    else:
        await add_favorite_audio_to_list(str(callback.message.chat.id),
                                   callback_data.pack())
        await callback.answer('‚úÖ –ê—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', show_alert=True)


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∞–ø–¥–µ–π—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data == 'pass')
async def skip_waiting_from_page_num_button(callback: CallbackQuery):
    await callback.answer()


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
# @router.callback_query()
# async def skip_waiting_from_inline_button(callback: CallbackQuery):
#     await callback.answer()
#     print(callback.data)