from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import ReplyKeyboardBuilder, ReplyKeyboardMarkup, \
    KeyboardButton, InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from db_logic import get_number_of_collection, get_number_of_topic, get_collection_by_number, get_id_by_audio, \
    get_dict_audios


class SoundsCallbackFactory(CallbackData, prefix='a'):
    collection: str
    topic: str = '0'
    id_sound: str = '0'


class FavourSoundsCallbackFactory(CallbackData, prefix='f'):
    collection: str
    topic: str
    id_sound: str


class DelSoundsCallbackFactory(CallbackData, prefix='d'):
    collection: str
    topic: str
    id_sound: str



def keyboard_build(lexicon: dict) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∫–∞–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param lexicon: dict
    :return: ReplyKeyboardMarkup
    """
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–∏–ª–¥–µ—Ä–∞
    kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
    # –¥–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–Ω–æ–ø–æ–∫
    keys = list(lexicon.keys())
    buttons = [KeyboardButton(text=lexicon[key]) for key in keys]
    # –º–µ—Ç–æ–¥–æ–º –±–∏–ª–¥–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏ (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤) –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return kb_builder.row(*buttons, width=2).as_markup(resize_keyboard=True)


async def inline_collections_keyboard_build(lexicon: list, width: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
    :param lexicon: list
    :param width: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    :return: InlineKeyboardMarkup
    """
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    buttons = []
    for i in lexicon:
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, callback.data –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π, –≤–∑—è—Ç—ã—Ö –∏–∑ –ë–î
        item = InlineKeyboardButton(
            text=i,
            callback_data=SoundsCallbackFactory(collection=await get_number_of_collection(i)).pack())
        buttons.append(item)

    return kb_builder.row(*buttons, width=width).as_markup()


async def inline_pagination_topics_keyboard_build(topic_list: list[list],
                                            num_collect,
                                            width: int,
                                            index: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–º
    :param topic_list: list - —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–æ–≤ —Ç–µ–º (—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–µ–º–∞–º–∏)
    :param num_collect: str - –Ω–æ–º–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    :param width: int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    :param index: int - –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ —Ç–µ–º—ã –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    :return: InlineKeyboardMarkup
    """
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –µ–µ –Ω–æ–º–µ—Ä—É (–≤–∑—è—Ç–æ–≥–æ –∏–∑ callback.data –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞)
    collect = await get_collection_by_number(num_collect)
    buttons = []
    for i in topic_list[index]:
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, callback.data –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã
        item = InlineKeyboardButton(
            text=i,
            callback_data=SoundsCallbackFactory(
                collection=num_collect,
                topic=await get_number_of_topic(
                    collect=collect,
                    topic=i
                )
            ).pack()
        )
        buttons.append(item)

    kb_builder.row(*buttons, width=width)
    # —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb_builder.row(
        InlineKeyboardButton(
            text='<<',
            callback_data=SoundsCallbackFactory(collection=num_collect, topic='back_topic_list').pack()
        ),
        # —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ + 1
        InlineKeyboardButton(
            text=f'{index + 1}/{len(topic_list)}',
            callback_data='pass'),
        InlineKeyboardButton(
            text='>>',
            callback_data=SoundsCallbackFactory(collection=num_collect, topic='forward_topic_list').pack()
        )
    )
    kb_builder.row(
        InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data='back_to_collection_menu')
    )
    return kb_builder.as_markup()


async def inline_pagination_soundlist_keyboard_build(num_collect: str,
                                               num_topic: str,
                                               pages_of_audiolist: list[list],
                                               index: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ
    :param num_collect:
    :param num_topic:
    :param pages_of_audiolist:
    :param index:
    :return:
    """
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    buttons = []
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, callback.data –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã, id –∞—É–¥–∏–æ
    for i in pages_of_audiolist[index]:
        id_sound = await get_id_by_audio(num_collect, num_topic, i)
        item = InlineKeyboardButton(
            text=i,
            callback_data=SoundsCallbackFactory(collection=num_collect, topic=num_topic, id_sound=str(id_sound)).pack()
        )
        buttons.append(item)

    kb_builder.row(*buttons, width=1)
    # —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb_builder.row(
        InlineKeyboardButton(
            text='<<',
            callback_data=SoundsCallbackFactory(collection=num_collect, topic=num_topic, id_sound='back').pack()
        ),
        InlineKeyboardButton(
            text=f'{index+1}/{len(pages_of_audiolist)}',
            callback_data='pass'),
        InlineKeyboardButton(
            text='>>',
            callback_data=SoundsCallbackFactory(collection=num_collect, topic=num_topic, id_sound='forward').pack()
        )
    )
    kb_builder.row(
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_topic_menu')
    )
    return kb_builder.as_markup()



async def inline_pagination_favorite_soundlist_keyboard_build(buttons_dict_list: list[dict],
                                                        index: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ
    :param buttons_dict_list: list[dict]
    :param index: int
    :return:
    """
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    buttons = []

    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, callback.data –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã, id –∞—É–¥–∏–æ
    for key, value in buttons_dict_list[index].items():
        key_lst = key.split(':')
        item = InlineKeyboardButton(
            text=value,
            callback_data=SoundsCallbackFactory(collection=key_lst[1], topic=key_lst[2], id_sound=key_lst[3]).pack())
        buttons.append(item)

    kb_builder.row(*buttons, width=1)
    # —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb_builder.row(
        InlineKeyboardButton(text='<<', callback_data='favorite_audio_list_back'),
        InlineKeyboardButton(text=f'{index+1}/{len(buttons_dict_list)}', callback_data='pass'),
        InlineKeyboardButton(text='>>', callback_data='favorite_audio_list_forward')
    )
    kb_builder.row(
        InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫', callback_data='edit_favorite_audio_list')
    )
    return kb_builder.as_markup()




async def inline_pagination_favor_soundlist_delition_keyboard_build(buttons_dict_list: list[dict],
                                                        index: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ
    :param buttons_dict_list: list[dict]
    :param index: int
    :return:
    """
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    buttons = []

    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, callback.data –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã, id –∞—É–¥–∏–æ
    for key, value in buttons_dict_list[index].items():
        key_lst = key.split(':')
        item = InlineKeyboardButton(
            text=f'‚ùå –£–¥–∞–ª–∏—Ç—å {value}',
            callback_data=DelSoundsCallbackFactory(collection=key_lst[1], topic=key_lst[2], id_sound=key_lst[3]).pack())
        buttons.append(item)

    kb_builder.row(*buttons, width=1)
    # —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    kb_builder.row(
        InlineKeyboardButton(text='<<', callback_data='del_audio_list_back'),
        InlineKeyboardButton(text=f'{index+1}/{len(buttons_dict_list)}', callback_data='pass'),
        InlineKeyboardButton(text='>>', callback_data='del_audio_list_forward')
    )
    kb_builder.row(
        InlineKeyboardButton(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='cancel_edit_favor_audio_list')
    )
    return kb_builder.as_markup()


if __name__ == '__main__':
    pass
