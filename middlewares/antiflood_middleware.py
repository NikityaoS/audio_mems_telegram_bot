from datetime import datetime
from typing import Dict, Any, Awaitable, Callable
from aiogram import BaseMiddleware
from aiogram.types import Update
from db_logic import get_user_info_antiflood_in_redis, set_user_info_antiflood_in_redis, add_1_to_user_info_in_redis, \
    get_blocking_date_and_period, set_blocking_date_and_period


class AntifloodMiddleware(BaseMiddleware):

    @staticmethod
    def convert_seconds(seconds):
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        days, hours = divmod(hours, 24)
        return f"{int(days)} –¥–Ω–µ–π {int(hours):02d} —á–∞—Å–æ–≤ {int(minutes):02d} –º–∏–Ω—É—Ç {int(seconds):02d} —Å–µ–∫—É–Ω–¥"

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:

        async def is_user_blocked(user_id):
            blocking_date, blocking_period = await get_blocking_date_and_period(str(user_id))
            if not blocking_date:
                return False

            now_date = datetime.now().timestamp()
            blocking_date_timestamp = blocking_date.timestamp()
            return (now_date - blocking_date_timestamp) < blocking_period

        async def handle_too_many_requests(user_id, event):
            await set_blocking_date_and_period(str(user_id))
            blocking_date, blocking_period = await get_blocking_date_and_period(str(user_id))
            formatted_blocking_period = self.convert_seconds(blocking_period)
            message_text = (
                f"üö´Ô∏è –í—ã –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ "
                f"–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞: {formatted_blocking_period}"
            )

            if event.callback_query:
                await event.callback_query.answer()
                await event.callback_query.message.answer(text=message_text)
            else:
                await event.message.answer(text=message_text)

        async def check_flood_and_handle(event, user_id):
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
            if event.message and event.message.text == '/start':
                return await handler(event, data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if await is_user_blocked(user_id):
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥–∞
            info_in_redis = get_user_info_antiflood_in_redis(user_id)
            if info_in_redis and int(info_in_redis) >= 5:
                await handle_too_many_requests(user_id, event)
                return

            if not info_in_redis:
                set_user_info_antiflood_in_redis(user_id)
            else:
                add_1_to_user_info_in_redis(user_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            return await handler(event, data)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        async def event_handler(event, data):
            user_id = data['event_from_user'].id
            await check_flood_and_handle(event, user_id)

        await event_handler(event, data)
